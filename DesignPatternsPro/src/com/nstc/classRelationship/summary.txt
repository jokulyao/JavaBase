一、设计模式中的类的关系

类与类之间主要有6种关系，他们分别是：依赖、关联、聚合、组合、继承、实现。他们的耦合度依次增强。

1.1	依赖(Dependence)
	对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系。
	定义比较晦涩难懂，但在java中的表现还是比较直观的：类A当中使用了类B，其中类B是作为类A的方法参数、方法中的局部变量、或者静态方法调用。
	类上面的图例中：People类依赖于Book类和Food类，Book类和Food类是作为类中方法的参数形式出现在People类中的。
	
1.2	关联(Association)
	 对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象之间为关联关系。
	 关联关系分为单向关联和双向关联。
	 在java中，单向关联表现为：类A当中使用了类B，其中类B是作为类A的成员变量;
	 双向关联表现为：类A当中使用了类B作为成员变量；同时类B中也使用了类A作为成员变量
	 
1.3	聚合(Aggregation)
	聚合关系是关联关系的一种，耦合度强于关联，他们的代码表现是相同的,仅仅是在语义上有所区别：
	关联关系的对象间是相互独立的，而聚合关系的对象之间存在着包容关系，他们之间是“整体-个体”的相互关系。
	
1.4 组合(Composition)
	相比于聚合，组合是一种耦合度更强的关联关系。
	存在组合关系的类表示“整体-部分”的关联关系，“整体”负责“部分”的生命周期，他们之间是共生共死的；并且“部分”单独存在时没有任何意义。
	在下图的例子中，People与Soul、Body之间是组合关系，当人的生命周期开始时，必须同时有灵魂和肉体；
	当人的生命周期结束时，灵魂肉体随之消亡；无论是灵魂还是肉体，都不能单独存在，他们必须作为人的组成部分存在。

1.5	继承(Generalization)
	 继承表示类与类（或者接口与接口）之间的父子关系。
	 在java中，用关键字extends表示继承关系。UML图例中，继承关系用实线+空心箭头表示，箭头指向父类。

1.6	实现(Implementation)
	表示一个类实现一个或多个接口的方法。接口定义好操作的集合，由实现类去完成接口的具体操作。
	在java中使用implements表示。UML图例中，实现关系用虚线+空心箭头表示，箭头指向接口。
	在java中继承使用extends关键字，实现使用implements关键字，很直观。就不代码演示了。
	
总结：关联、聚合、组合只能配合语义，结合上下文才能够判断出来，而只给出一段代码让我们判断是关联，聚合，还是组合关系，则是无法判断的。